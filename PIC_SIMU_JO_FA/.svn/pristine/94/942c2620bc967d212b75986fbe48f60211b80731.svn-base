package handler;

import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;

import javax.swing.AbstractCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

import view.ViewBox;
import logic.Interpreter;
import logic.Register;



//Bibliotheken für Editor
import java.awt.Component;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;




import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellEditor;

//

public class Elementhandlers{
	public static Register myRegister = new Register();
	public static int var =0;
	public static int pointerTable=0;
	public static void buttonStart(int[] befehlscode){
	
	
		
		try {										//Exception abfangen, falls Start gedrückt wird ohne ein File zu laden.
			while (true){ // Gehe alle Befehle durch
				int pc= myRegister.getProgrammcounter();
				System.out.println("Befehl " + Integer.toHexString(befehlscode[pc]) + ":");
				Interpreter.befehlserkennung(befehlscode[pc]);
				myRegister.printRegister();
				updateTable();
				//Thread.sleep(1000);
				}
			}
			catch(NullPointerException e1) {System.out.println("Zuerst Befehlscode einlesen!"+ e1);}
		
		
	}
	
	public static void buttonStep(int[] befehlscode){
	
	 //int zaehler = 0;	//sollte static sein, um Befehle hochzuzählen und beim nächsten Aufruf den aktuellen Befehl zu liefern
	
		try {
			//Exception abfangen, falls Start
			
			Interpreter.befehlserkennung(befehlscode[Elementhandlers.myRegister.getProgrammcounter()]);
			myRegister.printRegister();
						
			updateTable();
						
			
			pointerTable = ViewBox.positionInStringArray[Elementhandlers.myRegister.getProgrammcounter()];
			ViewBox.table.getColumn("Quellcode").setCellRenderer(new DefaultTableCellRenderer(){
				Color originalColor = null;

		        @Override
		        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		            DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		            if (originalColor == null) {
		                originalColor = getBackground();
		            }
		            if (value == null) {
		                renderer.setText("");
		            } else {
		                renderer.setText(value.toString());
		            }

		            if (row == pointerTable) {
		                renderer.setBackground(Color.RED);
		            } else {
		                renderer.setBackground(originalColor); // Retore original color
		            }
		            return renderer;
		        }
			});
			ViewBox.table.setRowSelectionInterval(pointerTable,pointerTable);
			ViewBox.table.clearSelection();
			
			
			
			}
			catch(NullPointerException e1) { System.out.println("Zuerst Befehlscode einlesen!" + e1);}
	}
	
	public static void updateTable() {
		Object[][] rows = new Object [32][9];
		String[] columns = new String [9];
		int count=0;
		int[] registers =	Elementhandlers.myRegister.getRegisters(); 
		//Column nummerieren
		for (int i=0;i<32;i++){
			rows[i][0]= Integer.toHexString(i*8);
		}
		columns[0]= "X";
		for (int l=0;l<8;l++){
			columns[l+1]= Integer.toHexString(l);
		}
		//Füllen der Daten
		for(int k=0;k<32;k++){
			for (int j=1;j<9;j++){
				rows[k][j]=Integer.toHexString(registers[count]);
				count++;
			}
		}
		ViewBox.register_table.setModel(new DefaultTableModel(rows,columns));
		String wReg= "W-Register :" + Integer.toHexString(Elementhandlers.myRegister.getWRegister());
		ViewBox.lblWregister.setText(wReg);
		
		
		for (int i = 1; i <9; i++){
			TableColumn col = ViewBox.register_table.getColumnModel().getColumn(i);
			   col.setCellEditor(new Editor());
			}
		
	}

	
	public static void fromRegisterToTable()
	{
		
		
	}
	
	
	
	public static void buttonLoad(){
		
		
	}
	
	public static String[] loadFile(String filename, String dir){
		try {
			
			int zeilennummer = 0;
			int zeilenanzahl=0;
			File sourcecode = new File(dir + "\\" + filename);
			BufferedReader in = new BufferedReader(new FileReader(sourcecode));
			String zeile = null;
			ArrayList quellCodeArrayList= new ArrayList();
			while ((zeile = in.readLine()) != null) {
				//System.out.println(zeile);
				quellCodeArrayList.add(zeile);
				//System.out.println(quellcodeString);
				zeilennummer++;
			}
			Object[] quellCodeObject= quellCodeArrayList.toArray();
			String[] quellcodeStringArray = new String[quellCodeObject.length];
			for (int i=0; i <quellCodeObject.length;i++){
			quellcodeStringArray[i] = quellCodeObject[i].toString();
			System.out.println(quellcodeStringArray[i]);
			}
			return quellcodeStringArray;	
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	public static int[] convertStringFileToIntFile(String[] stringquellcode){
		int index=0;
		for (int i=0;i<stringquellcode.length;i++){
			char erstesZeichen= stringquellcode[i].charAt(0);
			if(erstesZeichen != 32){
				index++;
				}
			}
		int[] befehlscode = new int[index];
		int befehlscodenummerierung = 0;
		for (int i=0;i<stringquellcode.length;i++){
			char erstesZeichen= stringquellcode[i].charAt(0);
			if(erstesZeichen != 32){
				System.out.println(stringquellcode[i] + "hat keine Leerzeichen");
				ViewBox.positionInStringArray[befehlscodenummerierung]= i;
				String befehlsCodeinString= stringquellcode[i].substring(5, 9);
				int temp= Integer.parseInt(befehlsCodeinString,16);
				befehlscode[befehlscodenummerierung]= temp;
				befehlscodenummerierung++;
			} 
		}
	return befehlscode;
	}
	
}

class Editor implements TableCellEditor{
	/** das Textfeld des Editors */
	private JTextField textField = new JTextField();
	/** Observer des Editors */
	private List<CellEditorListener> listeners = new ArrayList<CellEditorListener>();
 
	// Prepariert den Editor, so dass ein neuer Wert angezeigt wird.
	public Component getTableCellEditorComponent( 
			JTable table, Object value, boolean isSelected, int row, int column ){
 
		textField.setText( String.valueOf( value ) );
		return textField;
	}
 
	public void addCellEditorListener( CellEditorListener l ){
		listeners.add( l );
	}
 
	public void removeCellEditorListener( CellEditorListener l ){
		listeners.remove( l );
	}
 
	// Gibt den aktuellen Wert des Editors zurück.
	public Object getCellEditorValue(){
		return textField.getText();
	}
 
	public boolean isCellEditable( EventObject anEvent ){
		return true;
	}
 
	public boolean shouldSelectCell( EventObject anEvent ){
		return true;
	}
 
	// Informiert alle Observer, dass die Aktion abgebrochen wurde.
	public void cancelCellEditing(){
		ChangeEvent event = new ChangeEvent( this );
		for( CellEditorListener listener : 
			listeners.toArray( new CellEditorListener[ listeners.size() ] )){
 
			listener.editingCanceled( event );
		}
	}
 
	// Informiert alle Observer, dass der Wert gespeichert werden soll.
	public boolean stopCellEditing(){
		ChangeEvent event = new ChangeEvent( this );
		for( CellEditorListener listener : 
			listeners.toArray( new CellEditorListener[ listeners.size() ] )){
			listener.editingStopped( event );
			
			int column = ViewBox.register_table.getSelectedColumn();
			int row = ViewBox.register_table.getSelectedRow();
			System.out.println("col:" + column);
			int register = row * 8 + column -1;
			//listener.
			System.out.println(register);
			//System.out.println(test1);
			Object temp = ViewBox.register_table.getValueAt(row, column);
			String temp2 = temp.toString();
			
			int inhalt = Integer.parseInt(temp2, 16);
			
			Elementhandlers.myRegister.fromTableToRegister(inhalt, register);
			Elementhandlers.myRegister.printRegister();
		}
 
		// informiert den Aufrufer, dass der Input korrekt ist.
		return true;
	}
}
