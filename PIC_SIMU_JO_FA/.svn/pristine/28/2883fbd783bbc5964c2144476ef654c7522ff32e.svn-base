package logic;


import java.util.ArrayDeque;
import java.util.Deque;

public class Register {

	private int[] speicher= new int[256];
	private int wRegister;
	private int programmcounter;
	private Deque<Integer> myStack = new ArrayDeque<Integer>();
	
	public Register(){
		
	//init Speicher---------------- Alex meinte hier gibt es noch ein Paar Register die sind zu Anfang nicht null
	//----------------------------- müssen hier dann noch extra deklariert werden
	for (int j=0;j<256;j++){
		this.speicher[j]=0;
	}
	this.speicher[0x03]=0x18;
	this.speicher[0x83]=0x18;
	this.speicher[0x81]=0xFF;
	this.speicher[0x85]= 0xFF;
	this.speicher[0x86]= 0xFF;
	
	//init programcounter---------- Zwar in den Registern enthalten, hier ist jezz die Frage ob wir es so Redundant lassen sollen
	//----------------------------- oder ob wir nur mit Speicher-Array arbeiten sollen
	this.wRegister=0;
	boolean empty =false;
	while(empty =false){
	empty= this.myStack.isEmpty();
	this.myStack.pop();
	}
	this.programmcounter=0;
	}
	
	public void setProgrammcounterByCallAndGoto(int givenPC){
		int pclath = this.speicher[10];
		pclath = (Integer.rotateRight(pclath, 3)) & 0b11;
		pclath = Integer.rotateLeft(pclath, 11);
		this.programmcounter= pclath | givenPC;
		int pcl = programmcounter & 0b11111111;
		int newPclath = (Integer.rotateRight(programmcounter, 8)) & 0b11111;
		this.speicher[2]= pcl;
		this.speicher[10]= newPclath;
		this.speicher[10]= newPclath;
	}
	
	
	public int getProgrammcounter(){
		return this.programmcounter;
	}
	public int getWRegister(){
		return this.wRegister;
	}
	public void setWRegister(int result){
		this.wRegister=result;
	}
	public void setRegister(int f, int result){
		this.speicher[f]= result;
	}
	public int getRegisterValue(int f){
		return this.speicher[f];
	}
	public void increaseProgrammcounter(){
		this.programmcounter++;
		int pcl = programmcounter & 0b11111111;
		int pclath = (Integer.rotateRight(programmcounter, 8)) & 0b11111;
		this.speicher[2]= pcl;
		this.speicher[10]= pclath;
	}

	public void printRegister() {
		for  (int j=0; j <128;j++){
			System.out.println("Register: " + Integer.toHexString(j) + " : " +  Integer.toHexString(speicher[j]));
			}
		System.out.println("WRegister: " + wRegister);
		System.out.println("Programmcounter: " + programmcounter);
		System.out.println("Stack: " + myStack.toString());
	}
	public void setZFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister|0b00000100;
			this.speicher[3]= result;

	}
	public void clearZFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister & 0b11111011;
			this.speicher[3]= result;
		
	}
	public void setCFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister|0b00000001;
			this.speicher[3]= result;
	}
	public int getCFlag(){
		int statusReg =this.speicher[3];
		int result= statusReg & 0b00000001;
		
		if(result == 0){
			return 0;	
		}
		else{
		return 1;
		}		
	}
	public void clearCFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister & 0b11111110;
			this.speicher[3]= result;
		
	}
	public void setCDFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister|0b00000010;
			this.speicher[3]= result;

	}
	public void clearCDFlag(){
			int statusregister= this.speicher[3];
			int result = statusregister & 0b11111101;
			this.speicher[3]= result;
	}
	public void programmCounterToStack(){
		this.myStack.push(programmcounter+1);
	}
	public void setProgrammCounterfromStack(){
		int jumpbackadress =  (int) this.myStack.pop();
		setProgrammcounterByCallAndGoto(jumpbackadress);
	}
	public int[] getRegisters(){
		return this.speicher;
	}
}
